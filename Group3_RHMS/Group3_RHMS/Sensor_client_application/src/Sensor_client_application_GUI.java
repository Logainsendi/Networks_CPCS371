/*
    -- Simulating a Remote Health Monitoring System for elderly patients using client-server TCP Sockets --
    Computer networks CPCS-371
    Team members:
        1. Hasna Othman Bukhari - B1
        2. Amani Khalid Biraik - B1
        3. Jetana Bassim Abudawood - B1
        4. Shaden Dhafer Alhashysh - B1
        5. Logain Ezzat Sendi - B2
        6. Wajd Bandar Alharbi - B1

    References:
    1. Java Socket Programming  (Java Networking Tutorial) - javatpoint. (n.d.). Retrieved January 22, 2023 from www.javatpoint.com. 
    https://www.javatpoint.com/socket-programming
    2. P. (2022, November 22). Thread.sleep() in Java - Java Thread sleep. Retrieved January 25, 2023 from DigitalOcean. 
    https://www.digitalocean.com/community/tutorials/thread-sleep-java
    3. NetBeans, A. (n.d.). Designing a Swing GUI in NetBeans IDE. https://netbeans.apache.org/kb/docs/java/quickstart-gui.html
 */

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Sensor_client_application_GUI extends javax.swing.JFrame {
// initiate variables

    static int heartRateSensor = 0;
    static double TempSensorDouble = 0;
    static String TempSensorString = "";
    static int O2Sensor = 0;
    static int limit;
    static Socket socket = null;
    static long startTime = 0;
    static long endTime = 0;

    public Sensor_client_application_GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        Enter = new javax.swing.JButton();
        JLabel = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        result = new javax.swing.JTextArea();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("client application");

        Enter.setText("Enter");
        Enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterActionPerformed(evt);
            }
        });

        JLabel.setText("Enter connection time wanted in seconds, 60s minimum: ");

        result.setColumns(20);
        result.setRows(5);
        jScrollPane1.setViewportView(result);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Enter))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabel)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Enter))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterActionPerformed

      
        
        
        try {
            limit = Integer.parseInt(jTextField1.getText());
            if (limit < 60) {
                limit = 60;
            }

            // the minimum time is 60 seconds, therefore, check if the user entered a time less than 60s
            // determine the start and end time of the program
            startTime = System.currentTimeMillis();
            endTime = startTime + limit * 1000;

	  // to get the address from another device
       	  // InetAddress addresses = InetAddress.getByName("x.x.x.x");
	  // save the address in a String variable
	  // String hostName = addresses.getHostName();
	  // create the socket based on the specific port and address 
	  //Socket socket = new Socket(hostName, port);

            // create the client socket
            socket = new Socket("localhost", 1345);

            // for sending the data to the personal server
            OutputStreamWriter output = new OutputStreamWriter(socket.getOutputStream());
            BufferedWriter writer = new BufferedWriter(output);

            while (System.currentTimeMillis() < endTime) {

                // generate random data
                // Heart rate sensor is between 50 and 120 heart beats each minute
                heartRateSensor = Data(50, 120);
                // Temperature sensor data is between 36 and 41
                TempSensorDouble = DataDouble(36, 41);
                // Oxygen level in the blood data is sent by the sensor with values between 60 to 100
                O2Sensor = Data(60, 100);
                // formating the date and time
                SimpleDateFormat formatter = new SimpleDateFormat("dd MMM yy 'time' HH:mm:ss");
                Date date = new Date();

                // coverting the double value of temperature to a string valuese
                TempSensorString = String.valueOf(TempSensorDouble);
                // take only one digit after the decimal point
                TempSensorString = TempSensorString.substring(0, 4);

                // print data
           
             
              result.append("\n\n At date: " + formatter.format(date) + ",sensed temperature is " + TempSensorString + "\n"
                        + "At date: " + formatter.format(date) + ",sensed heart rate is " + heartRateSensor + "\n"
                        + "At date: " + formatter.format(date) + ",sensed oxygen saturation is " + O2Sensor);

                // send the data to the personal server
                writer.write(heartRateSensor);
                writer.write(O2Sensor);
                writer.write(TempSensorString);
                writer.newLine();
                writer.flush();

                try {
                    // the program must hold for a 5s before the next iteration
                    Thread.sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Sensor_client_application_GUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

            socket.close();
           
        } catch (IOException ex) {
            Logger.getLogger(Sensor_client_application_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_EnterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException, InterruptedException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sensor_client_application_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sensor_client_application_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sensor_client_application_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sensor_client_application_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sensor_client_application_GUI().setVisible(true);
            }
        });

    }

    // this method generates an integer random number between the two values min and max
    public static int Data(int min, int max) {

        int random_int = (int) Math.floor(Math.random() * (max - min + 1) + min);

        return random_int;
    }

    // this method generates a double random number between the two values min and max
    public static double DataDouble(int min, int max) {
        return (ThreadLocalRandom.current().nextDouble() * (max - min)) + min;
    }
    



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Enter;
    private javax.swing.JLabel JLabel;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private static javax.swing.JTextArea result;
    // End of variables declaration//GEN-END:variables

}
