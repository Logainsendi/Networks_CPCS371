/*
    -- Simulating a Remote Health Monitoring System for elderly patients using client-server TCP Sockets --
    Computer networks CPCS-371
    Team members:
        1. Hasna Othman Bukhari - B1
        2. Amani Khalid Biraik - B1
        3. Jetana Bassim Abudawood - B1
        4. Shaden Dhafer Alhashysh - B1
        5. Logain Ezzat Sendi - B2
        6. Wajd Bandar Alharbi - B1

    References:
    1. Java Socket Programming  (Java Networking Tutorial) - javatpoint. (n.d.). Retrieved January 22, 2023 from www.javatpoint.com. 
    https://www.javatpoint.com/socket-programming
    2. P. (2022, November 22). Thread.sleep() in Java - Java Thread sleep. Retrieved January 25, 2023 from DigitalOcean. 
    https://www.digitalocean.com/community/tutorials/thread-sleep-java
    3. NetBeans, A. (n.d.). Designing a Swing GUI in NetBeans IDE. https://netbeans.apache.org/kb/docs/java/quickstart-gui.html
 */

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 96650
 */
public class Medical_server_GUI extends javax.swing.JFrame {

    /**
     * Creates new form JFrame2
     */
    public Medical_server_GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Output = new javax.swing.JScrollPane();
        Result = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Medical application");
        setForeground(new java.awt.Color(204, 204, 255));

        Result.setColumns(20);
        Result.setRows(5);
        Output.setViewportView(Result);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Output, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Output, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException, InterruptedException {
      try {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
             */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(Medical_server_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(Medical_server_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(Medical_server_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(Medical_server_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>
            //</editor-fold>

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new Medical_server_GUI().setVisible(true);
                }
            });

            // create the medical server socket
            ServerSocket MedicalServerSocket = new ServerSocket(5555);

            SimpleDateFormat formatter = new SimpleDateFormat("dd MMM yy 'time' HH:mm:ss");
            //1st loop
            while (true) {//the server always on

                Socket socket = MedicalServerSocket.accept(); // accept the socket

                // initiate the variables
                int alert = -1;
                double receiveTemp;
                String TempString = "";
                int receiveHeartRate;
                int receiveOxygenSaturation;

                while (true) {

                    // to read from the personal server class
                    InputStreamReader medicalInput = new InputStreamReader(socket.getInputStream());
                    BufferedReader medicalReader = new BufferedReader(medicalInput);

                    // if there is an alert from the personal server this a value must be read
                    alert = medicalReader.read();

                    // if the personal server detect any abnormal condition the alert will be send to the medical server (this server)
                    if (alert == 1) {

                        // read the temperature, heart rate, and oxygen saturation that sent by the personal server
                        receiveHeartRate = medicalReader.read();
                        receiveOxygenSaturation = medicalReader.read();
                        TempString = medicalReader.readLine();

                        // if the client application is terminated then the default data to be send is -1, so this method will check whether to end the connection or not
                        if (receiveHeartRate == -1) {
                            break;
                        }

                        //take only one digit after the decimal point of the temperature value
                        TempString = TempString.substring(0, 4);

                        // convert the String value of temperature to a double value
                        receiveTemp = Double.valueOf(TempString);
                        Date date = new Date();

                        // If the temperature exceeds 39 and heart rate is above 100 and oxygen is below 95
                        if ((receiveTemp > 39) && (receiveHeartRate > 100) && (receiveOxygenSaturation < 95)) {
                            Result.append("At date: " + formatter.format(date) + ", Temperature is high " + receiveTemp + "." + "\n");
                            Result.append("At date: " + formatter.format(date) + ", Hear rate is above normal " + receiveHeartRate + "." + "\n");
                            Result.append("At date: " + formatter.format(date) + ", Oxygen Saturation is low" + receiveOxygenSaturation + "." + "\n");
                            Result.append("ACTION:  Send an ambulance to the patient!" + "\n");
                            Result.append("" + "\n");
                        } // If the temperature is between 38 and 38.9, and the heart rate is between 95 and 98, and oxygen is below 80
                        else if (((receiveTemp >= 38) && (receiveTemp <= 38.9)) && ((receiveHeartRate >= 95) && (receiveHeartRate <= 98)) && (receiveOxygenSaturation < 80)) {
                            Result.append("At date: " + formatter.format(date) + ", Temperature is high " + receiveTemp + "." + "\n");
                            Result.append("At date: " + formatter.format(date) + ", Hear rate is normal " + receiveHeartRate + "." + "\n");
                            Result.append("At date: " + formatter.format(date) + ", Oxygen Saturation is low" + receiveOxygenSaturation + "." + "\n");
                            Result.append("ACTION: Call the patient's family!" + "\n");
                            Result.append("" + "\n");
                        } // default message for the caregiver
                        else {
                            Result.append("At date: " + formatter.format(date) + ", Temperature is " + receiveTemp + "." + "\n");
                            Result.append("At date: " + formatter.format(date) + ", Hear rate is " + receiveHeartRate + "." + "\n");
                            Result.append("At date: " + formatter.format(date) + ", Oxygen Saturation is " + receiveOxygenSaturation + "." + "\n");
                            Result.append("ACTION: Warning, advise patient to make a checkup appointment!" + "\n");
                            Result.append("" + "\n");
                        }

                    }

                    // the program must hold for a 5s before the next iteration
                    Thread.sleep(5000);
                }

                // closing the connections
                socket.close();

            }
        } catch (IOException ex) {
            Logger.getLogger(Medical_server_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane Output;
    private static javax.swing.JTextArea Result;
    // End of variables declaration//GEN-END:variables
}
